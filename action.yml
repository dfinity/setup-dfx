name: 'Install dfx'
description: 'Install the dfx utility at a particular version'
inputs:
  dfx-version:
    description: >
      The dfx version to install. This value will be used to populate
      the DFX_VERSION variable that will be handled by the installation
      script "install.sh".
      If "latest" is provided, the latest version will be installed.
      If "auto" is provided, the version will be taken from the "dfx" field in dfx.json if it exists; otherwise as if "latest".
    default: 'auto'

runs:
  using: composite
  steps:
    - name: Install dfx
      shell: sh
      env:
        DFXVM_INIT_YES: 'true'
      run: |
        if [ "${{ inputs.dfx-version }}" = "latest" ]; then
            echo "Latest version will be installed"
            export DFX_VERSION=""
        elif [ "${{ inputs.dfx-version }}" = "auto" ]; then
            export DFX_VERSION="$(jq -er '.dfx // ""' dfx.json || echo "")"
            echo "Took DFX_VERSION=$DFX_VERSION from dfx.json"
            #            if [ -f dfx.json ]; then
            #                export DFX_VERSION="$(jq -r '.dfx // ""' dfx.json)"
            #                echo "Took DFX_VERSION=$DFX_VERSION from dfx.json"
            #            else
            #                echo "No dfx.json found, installing the latest version"
            #                export DFX_VERSION=""
            #            fi
        else
            export DFX_VERSION="${{ inputs.dfx-version }}"
        fi

        echo "DFX_VERSION is $DFX_VERSION"

        sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
    - name: Set up path (linux)
      shell: sh
      if: runner.os == 'Linux'
      run: |
        echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
    - name: Set up path (macos)
      shell: sh
      if: runner.os == 'macOS'
      run: |
        echo "$HOME/Library/Application Support/org.dfinity.dfx/bin" >> $GITHUB_PATH
