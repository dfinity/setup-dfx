name: 'Install dfx'
description: 'Install the dfx utility at a particular version'
inputs:
  dfx-version:
    description: >
      The dfx version to install. This value will be used to populate
      the DFX_VERSION variable that will be handled by the installation
      script "install.sh".
      If "latest" is provided, the latest version will be installed.
      If "auto" is provided, the version will be taken from the "dfx" field in dfx.json if it exists; otherwise as if "latest".
    default: 'auto'

runs:
  using: composite
  steps:
    - name: Install dfx
      shell: sh
      env:
        DFXVM_INIT_YES: 'true'
      run: |
        if [ "${{ inputs.dfx-version }}" = "latest" ]; then
          export DFX_VERSION=""
        elif [ "${{ inputs.dfx-version }}" = "auto" ]; then
          export DFX_VERSION="$(jq -er '.dfx // ""' dfx.json || echo "")"
        else
          export DFX_VERSION="${{ inputs.dfx-version }}"
        fi

        echo "DFX_VERSION is $DFX_VERSION"

        # sh -ci "$(curl -fsSL --connect-timeout 1 https://internetcomputer.org/install.sh)"
        # --retry 10  --retry-all-errors
        if output=$(curl --fail --silent --show-error --location --connect-timeout 0.25 --retry 10 --retry-all-errors --retry-connrefused --max-time 120 https://internetcomputer.org/install.sh); then
          sh -c "$output"
        else
          echo "Failed to download install script."
          exit 1
        fi
    - name: Set up path (linux)
      shell: sh
      if: runner.os == 'Linux'
      run: |
        echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
    - name: Set up path (macos)
      shell: sh
      if: runner.os == 'macOS'
      run: |
        echo "$HOME/Library/Application Support/org.dfinity.dfx/bin" >> $GITHUB_PATH
